version: "3.9" # optional since v1.27.0
services:

  # postgresql:
  #   build:
  #     context: ./postgresql
  #   restart: unless-stopped
  #   volumes:
  #     - postgresql-data:/var/lib/postgresql/data
  #   env_file: 
  #     - postgresql/postgresql.env
  #   ports:
  #     - 5432:5432
  #   # networks:
  #   #   - backend

  signaling_server:
    container_name: signaling
    build:
      context: .
      dockerfile: signaling/Dockerfile
    ports: 
      - 5000:5000
      - 5001:5001

  media_server_mirror1:
    container_name: ms_mirror1
    build:
      context: .
      dockerfile: kurento/Dockerfile
    environment: 
      - MS_ROLE=mirror
      - SIGNALING_SERVER=host.docker.internal:5000
      - KMS_MIN_PORT=5002
      - KMS_MAX_PORT=5019
      - GST_DEBUG="2,Kurento*:4,kms*:4,sdp*:4,webrtc*:4,*rtpendpoint:4,rtp*handler:4,rtpsynchronizer:4,agnosticbin:4"
    ports: 
      - 8888:8888
      - 5002-5019:5002-5019/udp

  media_server_mirror2:
    container_name: ms_mirror2
    build:
      context: .
      dockerfile: kurento/Dockerfile
    environment: 
      - MS_ROLE=mirror
      - SIGNALING_SERVER=host.docker.internal:5000
      - KMS_MIN_PORT=5020
      - KMS_MAX_PORT=5039
      - GST_DEBUG="2,Kurento*:4,kms*:4,sdp*:4,webrtc*:4,*rtpendpoint:4,rtp*handler:4,rtpsynchronizer:4,agnosticbin:4"
    ports: 
      - 8889:8888
      - 5020-5039:5020-5039/udp

  # media_server_recorder_1:
  #   container_name: ms_recorder_1
  #   build:
  #     context: .
  #     dockerfile: kurento/Dockerfile
  #   environment: 
  #     - MS_ROLE=recorder
  #     - SIGNALING_SERVER=localhost:5000
  #     - AWS_BUCKET_NAME=tdx-recordings
  #     - AWS_ACCESS_KEY_ID=key
  #     - AWS_SECRET_KEY=key
  #     - KMS_MIN_PORT=5000
  #     - KMS_MAX_PORT=5050
  #     - GST_DEBUG="2,Kurento*:4,kms*:4,sdp*:4,webrtc*:4,*rtpendpoint:4,rtp*handler:4,rtpsynchronizer:4,agnosticbin:4"

#   turn:
#     container_name: coturn
#     image: coturn/coturn
#     restart: always
#     volumes:
#       - ${PWD}/coturn/turnserver.conf:/etc/turnserver.conf
#       - ${PWD}/coturn/privkey.pem:/etc/ssl/private/privkey.pem
#       - ${PWD}/coturn/cert.pem:/etc/ssl/certs/cert.pem
#     ports:
# ## STUN/TURN
#       - "3478:3478"
#       - "3478:3478/udp"
#       - "3479:3479"
#       - "3479:3479/udp"
#       - "80:80"
#       - "80:80/udp"
# ## STUN/TURN SSL
#       - "5349:5349"
#       - "5349:5349/udp"
#       - "5350:5350"
#       - "5350:5350/udp"
#       - "443:443"
#       - "443:443/udp"
# # Relay Ports
#       - "49500-50000:49500-50000"
#       - "49500-50000:49500-50000/udp"
#     # networks:
#     #   - frontend
#     #   - backend
#     depends_on:
#       - postgresql
#     env_file:
#       - coturn/coturn.env
# # DB
#       - postgresql/postgresql.env
# volumes:
#   postgresql-data:

# # networks:
# #   frontend:
# #     driver: bridge
# #     ipam:
# #       driver: default
# #       config:
# #         - subnet: 172.16.238.0/24
# #   backend:
# #     internal: true
